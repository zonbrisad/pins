#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------------
#
# show arduinopins at shell
#
# File:     ardpins
# Author:   Peter Malmberg  <peter.malmberg@gmail.com>
# Org:      __ORGANISTATION__
# Date:     2023-04-30
# License:  
# Python:   >= 3.0
#
# ----------------------------------------------------------------------------

# Imports --------------------------------------------------------------------


import argparse
import traceback
import os
import sys
from rich import print
from rich.panel import Panel
from rich.table import Table
from dataclasses import dataclass


# Variables ------------------------------------------------------------------

class App:
    NAME = "ardpins"
    VERSION = "0.01"
    DESCRIPTION = "show arduinopins at shell"
    LICENSE = ""
    AUTHOR = "Peter Malmberg"
    EMAIL = "<peter.malmberg@gmail.com>"
    ORG = "__ORGANISATION__"
    HOME = ""
    ICON = ""

COLS = ["spi", "i2c", "uart", "pwm"]

THEME = {
    "gpio": "#859900",
    "pins": "#333333",
    "spi": "#d33682",
    "i2c": "#268bd2",
    "uart": "#6c71c4",
    "pwm": "#666666",
    "panel": "#ffffff on #000000",
    "diagram": "#555555",
    "adc": "#2aa198",
    "power": "#dc322f",
    "ground": "#005b66",
    "run": "#df8f8e",
    "highlight": "#dc322f on white"
}


@dataclass
class Pinout():
    board_name: str
    pinout: str
    ground_pins: str    
    power_pins: str
    adc_pins: str
    run_pins: str

    def is_ground_pin(self, pin):
        return pin in self.ground_pins
    
    def is_power_pin(self, pin):
        return pin in self.power_pins
    
    def is_adc_pin(self, pin):
        return pin in self.adc_pins
    
    def is_run_pin(self, pin):
        return pin in self.run_pins
    
    def pin_style(self, pin):
        style = THEME["gpio"]
        if self.is_ground_pin(pin): style = THEME["ground"]
        if self.is_power_pin(pin): style = THEME["power"]
        if self.is_adc_pin(pin): style = THEME["adc"]
        if self.is_run_pin(pin): style = THEME["run"]
        return style
    
    def build_row(self,row, show_indexes, find=None):
        for index in show_indexes:
            label = row[index]
            # Special case styling for GPIO labels and search results
            if find and (find in label or find in label.lower()):
                label = f'[{THEME["highlight"]}]{label}[/]'
            else:
                if index == 4 and row[5] != "":
                    # label = gpio_style(int(row[5]), label)
                    label = f'[{self.pin_style(int(row[5]))}]{label}[/]'
                if index == 8 and row[7] != "":
                    #label = gpio_style(int(row[7]), label)
                    label = f'[{self.pin_style(int(row[7]))}]{label}[/]'
            # Slight fudge for whitespace between labels
            if index >= 6:
                label = " " + label
            if index <= 5:
                label = label + " "
            yield label

    def split(self):
        return [[col.strip() for col in line.split("|")] for line in self.pinout.splitlines()[1:]]
    
rp_pico = Pinout(
    board_name = "Raspberry Pi Pico",
    ground_pins = (3, 8, 13, 18, 23, 28, 38),
    power_pins = (40, 39, 37, 36),
    adc_pins = (35, 34, 33, 32, 31), 
    run_pins = [30], 
    pinout = """
      |         |        |        |      |  |     ┏━━━━━┓     |  |          |        |        |         |
      |         |        |        |      |  |┏━━━━┫     ┣━━━━┓|  |          |        |        |         |
PWM0 A|UART0 TX |I2C0 SDA|SPI0 RX |GP0   |1 |┃◎   ┗━━━━━┛   ◎┃|40|VBUS      |        |        |         |
PWM0 B|UART0 RX |I2C0 SCL|SPI0 CSn|GP1   |2 |┃◎ ▩           ◎┃|39|VSYS      |        |        |         |
      |         |        |        |Ground|3 |┃▣ └─GP25      ▣┃|38|Ground    |        |        |         |
PWM1 A|UART0 CTS|I2C1 SDA|SPI0 SCK|GP2   |4 |┃◎  ▒▒▒        ◎┃|37|3v3 En    |        |        |         |
PWM1 B|UART0 RTS|I2C1 SCL|SPI0 TX |GP3   |5 |┃◎  ▒▒▒        ◎┃|36|3v3 Out   |        |        |         |
PWM2 A|UART1 TX |I2C0 SDA|SPI0 RX |GP4   |6 |┃◎             ◎┃|35|ADC VRef  |        |        |         |
PWM2 B|UART1 RX |I2C0 SCL|SPI0 CSn|GP5   |7 |┃◎             ◎┃|34|GP28 / A2 |SPI1 RX |I2C0 SDA|UART0 TX |PWM6 A
      |         |        |        |Ground|8 |┃▣             ▣┃|33|ADC Ground|        |        |         |
PWM3 A|UART1 CTS|I2C1 SDA|SPI0 SCK|GP6   |9 |┃◎   ▓▓▓▓▓▓▓   ◎┃|32|GP27 / A1 |SPI1 TX |I2C1 SCL|UART1 RTS|PWM5 B
PWM3 B|UART1 RTS|I2C1 SCL|SPI0 TX |GP7   |10|┃◎   ▓▓▓▓▓▓▓   ◎┃|31|GP26 / A0 |SPI1 SCK|I2C1 SDA|UART1 CTS|PWM5 A
PWM4 A|UART1 TX |I2C0 SDA|SPI1 RX |GP8   |11|┃◎   ▓▓▓▓▓▓▓   ◎┃|30|run       |        |        |         |
PWM4 B|UART1 RX |I2C0 SCL|SPI1 CSn|GP9   |12|┃◎   ▓▓▓▓▓▓▓   ◎┃|29|GP22      |SPI0 SCK|I2C1 SDA|UART1 CTS|PWM3 A
      |         |        |        |Ground|13|┃▣             ▣┃|28|Ground    |        |        |         |
PWM5 A|UART1 CTS|I2C1 SDA|SPI1 SCK|GP10  |14|┃◎             ◎┃|27|GP21      |SPI0 CSn|I2C0 SCL|UART1 RX |PWM2 B
PWM5 B|UART1 RTS|I2C1 SCL|SPI1 TX |GP11  |15|┃◎             ◎┃|26|GP20      |SPI0 RX |I2C0 SDA|UART1 TX |PWM2 A
PWM6 A|UART0 TX |I2C0 SDA|SPI1 RX |GP12  |16|┃◎             ◎┃|25|GP19      |SPI0 TX |I2C1 SCL|UART0 RTS|PWM1 B
PWM6 B|UART0 RX |I2C0 SCL|SPI1 CSn|GP13  |17|┃◎             ◎┃|24|GP18      |SPI0 SCK|I2C1 SDA|UART0 CTS|PWM1 A
      |         |        |        |Ground|18|┃▣             ▣┃|23|Ground    |        |        |         |
PWM7 A|UART0 CTS|I2C1 SDA|SPI1 SCK|GP14  |19|┃◎             ◎┃|22|GP17      |SPI0 CSn|I2C0 SCL|UART0 RX |PWM0 B
PWM7 B|UART0 RTS|I2C1 SCL|SPI1 TX |GP15  |20|┃◎    ◎ ▣ ◎    ◎┃|21|GP16      |SPI0 RX |I2C0 SDA|UART0 TX |PWM0 A
      |         |        |        |      |  |┗━━━━━━━━━━━━━━━┛|  |          |        |        |         |
"""
)

arduino_nano = Pinout(
    board_name = "Arduino Nano",
    ground_pins = (29, 4),
    power_pins = (17, 27, 30),
    adc_pins = (35, 34, 33, 32, 31), 
    run_pins = [], 
    pinout = """
      |         |        |        |      |  |     ┏━━━━━┓     |  |          |        |        |         |
      |         |        |        |      |  |┏━━━━┫     ┣━━━━┓|  |          |        |        |         |
PWM0 A|UART0 TX |I2C0 SDA|SPI0 RX |GP0   |16|┃◎   ┗━━━━━┛   ◎┃|15|VBUS      |        |        |         |
PWM0 B|UART0 RX |I2C0 SCL|SPI0 CSn|+3V3  |17|┃◎ ▩           ◎┃|14|VSYS      |        |        |         |
      |         |        |        |Ground|18|┃▣ └─GP25      ▣┃|13|Ground    |        |        |         |
PWM1 A|UART0 CTS|I2C1 SDA|SPI0 SCK|GP2   |19|┃◎  ▒▒▒        ◎┃|12|3v3 En    |        |        |         |
PWM1 B|UART0 RTS|I2C1 SCL|SPI0 TX |GP3   |20|┃◎  ▒▒▒        ◎┃|11|3v3 Out   |        |        |         |
PWM2 A|UART1 TX |I2C0 SDA|SPI0 RX |GP4   |21|┃◎             ◎┃|10|ADC VRef  |        |        |         |
PWM2 B|UART1 RX |I2C0 SCL|SPI0 CSn|GP5   |22|┃◎             ◎┃| 9|GP28 / A2 |SPI1 RX |I2C0 SDA|UART0 TX |PWM6 A
      |         |        |        |Ground|23|┃▣             ▣┃| 8|ADC Ground|        |        |         |
PWM3 A|UART1 CTS|I2C1 SDA|SPI0 SCK|GP6   |24|┃◎   ▓▓▓▓▓▓▓   ◎┃| 7|GP27 / A1 |SPI1 TX |I2C1 SCL|UART1 RTS|PWM5 B
PWM3 B|UART1 RTS|I2C1 SCL|SPI0 TX |GP7   |25|┃◎   ▓▓▓▓▓▓▓   ◎┃| 6|GP26 / A0 |SPI1 SCK|I2C1 SDA|UART1 CTS|PWM5 A
PWM4 A|UART1 TX |I2C0 SDA|SPI1 RX |GP8   |26|┃◎   ▓▓▓▓▓▓▓   ◎┃| 5|run       |        |        |         |
PWM4 B|UART1 RX |I2C0 SCL|SPI1 CSn|+5V   |27|┃◎   ▓▓▓▓▓▓▓   ◎┃| 4|GND      |SPI0 SCK|I2C1 SDA|UART1 CTS|PWM3 A
      |         |        |        |Reset |28|┃▣             ▣┃| 3|Reset     |        |        |         |
PWM5 A|UART1 CTS|I2C1 SDA|SPI1 SCK|GND   |29|┃◎    ◎ ▣ ◎    ◎┃| 2|GP21      |SPI0 CSn|I2C0 SCL|UART1 RX |PWM2 B
PWM7 B|UART0 RTS|I2C1 SCL|SPI1 TX |Vin   |30|┃◎    ◎ ▣ ◎    ◎┃| 1|GP16      |SPI0 RX |I2C0 SDA|UART0 TX |PWM0 A
      |         |        |        |      |  |┗━━━━━━━━━━━━━━━┛|  |          |        |        |         |
"""
)


# Code -----------------------------------------------------------------------


# def valid_label(label):
#     if label not in COLS:
#         usage(f"Invalid interface \"{label}\"")
#     return label



def main() -> None:
    parser = argparse.ArgumentParser(
        prog=App.NAME,
        description=App.DESCRIPTION,
        epilog="",
        add_help=True)
    
    parser.add_argument("--debug", action="store_true", default=False,
                        help="Print debug messages")
    # parser.add_argument("--help", action="store_true", default=False,
    #                     help="Print help")
    parser.add_argument("--version", action="version",
                        version=f"{App.NAME} {App.VERSION}",
                        help="Print version information")
    args = parser.parse_args()

    # if args.help:
    #     parser.print_help()

    show_indexes = []
    grid = Table.grid(expand=True)
    opts_show = COLS
    opts_find = None
    opts_pins = True
    opts_hide_gpio = False 

    # pinout = rp_pico
    pinout = arduino_nano

    for label in reversed(opts_show):
        grid.add_column(justify="left", style=THEME[label], no_wrap=True)
        show_indexes.append(list(reversed(COLS)).index(label))

    if not opts_hide_gpio:
        grid.add_column(justify="right", style=THEME["gpio"], no_wrap=True)
        show_indexes += [4]

    if opts_pins:
        grid.add_column(justify="right", style=THEME["pins"], no_wrap=True)
        show_indexes += [5]

    grid.add_column(justify="center", no_wrap=True, style=THEME["diagram"])
    show_indexes += [6]

    if opts_pins:
        grid.add_column(justify="left", style=THEME["pins"], no_wrap=True)
        show_indexes += [7]

    if not opts_hide_gpio:
        grid.add_column(justify="left", style=THEME["gpio"], no_wrap=True)
        show_indexes += [8]

    for label in opts_show:
        grid.add_column(justify="left", style=THEME[label], no_wrap=True)
        show_indexes.append(9 + COLS.index(label))

    # for row in pinout.split():
    #     grid.add_row(*build_row(row, show_indexes, find=opts_find))

    for row in pinout.split():
        grid.add_row(*pinout.build_row(row, show_indexes, find=opts_find))


    layout = Table.grid(expand=True)
    layout.add_row(grid)
    layout.add_row("@gadgetoid\nhttps://pico.pinout.xyz")

    print(Panel(
        layout,
        title=pinout.board_name,
        expand=False,
        style=THEME["panel"]))



if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt as e: # Ctrl-C
        raise e
    except SystemExit as e:        # sys.exit()
        raise e
    except Exception as e:
        print('ERROR, UNEXPECTED EXCEPTION')
        print(str(e))
        traceback.print_exc()
        os._exit(1)
